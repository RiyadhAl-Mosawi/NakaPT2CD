// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// arma_sort
arma::vec arma_sort(arma::vec x);
RcppExport SEXP _NakaPT2CD_arma_sort(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(arma_sort(x));
    return rcpp_result_gen;
END_RCPP
}
// MSE
double MSE(double xi, Rcpp::NumericVector xi_hat, std::string type, double q);
RcppExport SEXP _NakaPT2CD_MSE(SEXP xiSEXP, SEXP xi_hatSEXP, SEXP typeSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type xi_hat(xi_hatSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(MSE(xi, xi_hat, type, q));
    return rcpp_result_gen;
END_RCPP
}
// spmk_fun
double spmk_fun(Rcpp::NumericVector para, double l, double u, double t, double gm);
RcppExport SEXP _NakaPT2CD_spmk_fun(SEXP paraSEXP, SEXP lSEXP, SEXP uSEXP, SEXP tSEXP, SEXP gmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type para(paraSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type gm(gmSEXP);
    rcpp_result_gen = Rcpp::wrap(spmk_fun(para, l, u, t, gm));
    return rcpp_result_gen;
END_RCPP
}
// spmk_grad
Rcpp::NumericVector spmk_grad(Rcpp::NumericVector para, double l, double u, double t, double gm);
RcppExport SEXP _NakaPT2CD_spmk_grad(SEXP paraSEXP, SEXP lSEXP, SEXP uSEXP, SEXP tSEXP, SEXP gmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type para(paraSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type gm(gmSEXP);
    rcpp_result_gen = Rcpp::wrap(spmk_grad(para, l, u, t, gm));
    return rcpp_result_gen;
END_RCPP
}
// like
double like(Rcpp::NumericVector para, Rcpp::NumericVector X, Rcpp::NumericVector R);
RcppExport SEXP _NakaPT2CD_like(SEXP paraSEXP, SEXP XSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type para(paraSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(like(para, X, R));
    return rcpp_result_gen;
END_RCPP
}
// loglike
double loglike(Rcpp::NumericVector para, Rcpp::NumericVector X, Rcpp::NumericVector R);
RcppExport SEXP _NakaPT2CD_loglike(SEXP paraSEXP, SEXP XSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type para(paraSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(loglike(para, X, R));
    return rcpp_result_gen;
END_RCPP
}
// logpostlk
double logpostlk(Rcpp::NumericVector para, Rcpp::NumericVector X, Rcpp::NumericVector R);
RcppExport SEXP _NakaPT2CD_logpostlk(SEXP paraSEXP, SEXP XSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type para(paraSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(logpostlk(para, X, R));
    return rcpp_result_gen;
END_RCPP
}
// mps
double mps(Rcpp::NumericVector para, Rcpp::NumericVector X, Rcpp::NumericVector R);
RcppExport SEXP _NakaPT2CD_mps(SEXP paraSEXP, SEXP XSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type para(paraSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(mps(para, X, R));
    return rcpp_result_gen;
END_RCPP
}
// logmps
double logmps(Rcpp::NumericVector para, Rcpp::NumericVector X, Rcpp::NumericVector R);
RcppExport SEXP _NakaPT2CD_logmps(SEXP paraSEXP, SEXP XSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type para(paraSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(logmps(para, X, R));
    return rcpp_result_gen;
END_RCPP
}
// logpostps
double logpostps(Rcpp::NumericVector para, Rcpp::NumericVector X, Rcpp::NumericVector R);
RcppExport SEXP _NakaPT2CD_logpostps(SEXP paraSEXP, SEXP XSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type para(paraSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(logpostps(para, X, R));
    return rcpp_result_gen;
END_RCPP
}
// inform
NumericMatrix inform(Rcpp::NumericVector para, Rcpp::NumericVector X, Rcpp::NumericVector R, double lower, double upper);
RcppExport SEXP _NakaPT2CD_inform(SEXP paraSEXP, SEXP XSEXP, SEXP RSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type para(paraSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(inform(para, X, R, lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// cscore
double cscore(double y, double xi, Rcpp::NumericVector X, Rcpp::NumericVector R, Rcpp::NumericVector Z);
RcppExport SEXP _NakaPT2CD_cscore(SEXP ySEXP, SEXP xiSEXP, SEXP XSEXP, SEXP RSEXP, SEXP ZSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Z(ZSEXP);
    rcpp_result_gen = Rcpp::wrap(cscore(y, xi, X, R, Z));
    return rcpp_result_gen;
END_RCPP
}
// Estim
Rcpp::List Estim(arma::vec True_Par, arma::vec X, arma::vec R, double l, double u, double t, double gm, arma::vec para, std::string type, arma::vec lw, arma::vec up, std::string method);
RcppExport SEXP _NakaPT2CD_Estim(SEXP True_ParSEXP, SEXP XSEXP, SEXP RSEXP, SEXP lSEXP, SEXP uSEXP, SEXP tSEXP, SEXP gmSEXP, SEXP paraSEXP, SEXP typeSEXP, SEXP lwSEXP, SEXP upSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type True_Par(True_ParSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type R(RSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type gm(gmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type para(paraSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lw(lwSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type up(upSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(Estim(True_Par, X, R, l, u, t, gm, para, type, lw, up, method));
    return rcpp_result_gen;
END_RCPP
}
// EM_Alg
Rcpp::List EM_Alg(Rcpp::NumericVector True_Par, Rcpp::NumericVector X, Rcpp::NumericVector R, double l, double u, double t, double gm, Rcpp::NumericVector para, double upper, int MaxIter, double tol, int verbose);
RcppExport SEXP _NakaPT2CD_EM_Alg(SEXP True_ParSEXP, SEXP XSEXP, SEXP RSEXP, SEXP lSEXP, SEXP uSEXP, SEXP tSEXP, SEXP gmSEXP, SEXP paraSEXP, SEXP upperSEXP, SEXP MaxIterSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type True_Par(True_ParSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type gm(gmSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type para(paraSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< int >::type MaxIter(MaxIterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(EM_Alg(True_Par, X, R, l, u, t, gm, para, upper, MaxIter, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}
// TK
Rcpp::List TK(arma::vec True_para, arma::vec X, arma::vec R, double L, double U, double T, double GM, double q, double c, arma::vec para, std::string type);
RcppExport SEXP _NakaPT2CD_TK(SEXP True_paraSEXP, SEXP XSEXP, SEXP RSEXP, SEXP LSEXP, SEXP USEXP, SEXP TSEXP, SEXP GMSEXP, SEXP qSEXP, SEXP cSEXP, SEXP paraSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type True_para(True_paraSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type R(RSEXP);
    Rcpp::traits::input_parameter< double >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type U(USEXP);
    Rcpp::traits::input_parameter< double >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type GM(GMSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type para(paraSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(TK(True_para, X, R, L, U, T, GM, q, c, para, type));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_NakaPT2CD_arma_sort", (DL_FUNC) &_NakaPT2CD_arma_sort, 1},
    {"_NakaPT2CD_MSE", (DL_FUNC) &_NakaPT2CD_MSE, 4},
    {"_NakaPT2CD_spmk_fun", (DL_FUNC) &_NakaPT2CD_spmk_fun, 5},
    {"_NakaPT2CD_spmk_grad", (DL_FUNC) &_NakaPT2CD_spmk_grad, 5},
    {"_NakaPT2CD_like", (DL_FUNC) &_NakaPT2CD_like, 3},
    {"_NakaPT2CD_loglike", (DL_FUNC) &_NakaPT2CD_loglike, 3},
    {"_NakaPT2CD_logpostlk", (DL_FUNC) &_NakaPT2CD_logpostlk, 3},
    {"_NakaPT2CD_mps", (DL_FUNC) &_NakaPT2CD_mps, 3},
    {"_NakaPT2CD_logmps", (DL_FUNC) &_NakaPT2CD_logmps, 3},
    {"_NakaPT2CD_logpostps", (DL_FUNC) &_NakaPT2CD_logpostps, 3},
    {"_NakaPT2CD_inform", (DL_FUNC) &_NakaPT2CD_inform, 5},
    {"_NakaPT2CD_cscore", (DL_FUNC) &_NakaPT2CD_cscore, 5},
    {"_NakaPT2CD_Estim", (DL_FUNC) &_NakaPT2CD_Estim, 12},
    {"_NakaPT2CD_EM_Alg", (DL_FUNC) &_NakaPT2CD_EM_Alg, 12},
    {"_NakaPT2CD_TK", (DL_FUNC) &_NakaPT2CD_TK, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_NakaPT2CD(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
